var searchIndex = {};
searchIndex['gc'] = {"items":[[3,"Gc","gc","A garbage-collected pointer type over an immutable value.",null,null],[3,"GcCell","","A mutable memory location with dynamically checked borrow rules\nwhich can be used inside of a garbage collected pointer.",null,null],[3,"GcCellRefMut","","A wrapper type for a mutably borrowed value from a GcCell&lt;T&gt;",null,null],[5,"force_collect","","Immediately trigger a garbage collection on the current thread.",null,{"inputs":[],"output":null}],[11,"trace","collections::string","",0,{"inputs":[{"name":"string"}],"output":null}],[11,"root","","",0,{"inputs":[{"name":"string"}],"output":null}],[11,"unroot","","",0,{"inputs":[{"name":"string"}],"output":null}],[11,"trace","alloc::boxed","",1,{"inputs":[{"name":"box"}],"output":null}],[11,"root","","",1,{"inputs":[{"name":"box"}],"output":null}],[11,"unroot","","",1,{"inputs":[{"name":"box"}],"output":null}],[11,"trace","collections::vec","",2,{"inputs":[{"name":"vec"}],"output":null}],[11,"root","","",2,{"inputs":[{"name":"vec"}],"output":null}],[11,"unroot","","",2,{"inputs":[{"name":"vec"}],"output":null}],[11,"trace","core::option","",3,{"inputs":[{"name":"option"}],"output":null}],[11,"root","","",3,{"inputs":[{"name":"option"}],"output":null}],[11,"unroot","","",3,{"inputs":[{"name":"option"}],"output":null}],[6,"GcCellRef","gc","A wrapper type for an immutably borrowed value from a GcCell&lt;T&gt;",null,null],[8,"Trace","","The Trace trait which needs to be implemented on garbage collected objects",null,null],[10,"trace","","Mark all contained Gcs",4,{"inputs":[{"name":"trace"}],"output":null}],[10,"root","","Increment the root-count of all contained Gcs",4,{"inputs":[{"name":"trace"}],"output":null}],[10,"unroot","","Decrement the root-count of all contained Gcs",4,{"inputs":[{"name":"trace"}],"output":null}],[11,"new","","Constructs a new `Gc&lt;T&gt;`.",5,{"inputs":[{"name":"gc"},{"name":"t"}],"output":{"name":"gc"}}],[11,"trace","","",5,{"inputs":[{"name":"gc"}],"output":null}],[11,"root","","",5,{"inputs":[{"name":"gc"}],"output":null}],[11,"unroot","","",5,{"inputs":[{"name":"gc"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"gc"}],"output":{"name":"gc"}}],[11,"deref","","",5,{"inputs":[{"name":"gc"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"gc"}],"output":null}],[11,"default","","",5,{"inputs":[{"name":"gc"}],"output":{"name":"gc"}}],[11,"eq","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"gc"},{"name":"gc"}],"output":{"name":"ordering"}}],[11,"hash","","",5,{"inputs":[{"name":"gc"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"gc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"gc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"gc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"gc"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `GcCell` containing `value`.",6,{"inputs":[{"name":"gccell"},{"name":"t"}],"output":{"name":"gccell"}}],[11,"into_inner","","Consumes the `GcCell`, returning the wrapped value.",6,{"inputs":[{"name":"gccell"}],"output":{"name":"t"}}],[11,"borrow","","Immutably borrows the wrapped value.",6,{"inputs":[{"name":"gccell"}],"output":{"name":"gccellref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",6,{"inputs":[{"name":"gccell"}],"output":{"name":"gccellrefmut"}}],[11,"trace","","",6,{"inputs":[{"name":"gccell"}],"output":null}],[11,"root","","",6,{"inputs":[{"name":"gccell"}],"output":null}],[11,"unroot","","",6,{"inputs":[{"name":"gccell"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"gccellrefmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"gccellrefmut"}],"output":{"name":"t"}}],[11,"drop","","",7,{"inputs":[{"name":"gccellrefmut"}],"output":null}],[11,"default","","",6,{"inputs":[{"name":"gccell"}],"output":{"name":"gccell"}}],[11,"eq","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"gccell"},{"name":"gccell"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"gccell"},{"name":"h"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"gccell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"gccell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"gccell"},{"name":"t"}],"output":{"name":"self"}}],[14,"unsafe_empty_trace!","","This simple rule implements the trace methods such with empty\nimplementations - use this for marking types as not containing any Trace types!",null,null],[14,"custom_trace!","","This rule implements the trace method. You define a this parameter name, and\npass in a body, the body should call `mark` on every traceable element inside\nthe body, and the mark implementation will automatically delegate to the correct\nmethod on the argument.",null,null]],"paths":[[3,"String"],[3,"Box"],[3,"Vec"],[4,"Option"],[8,"Trace"],[3,"Gc"],[3,"GcCell"],[3,"GcCellRefMut"]]};
initSearch(searchIndex);
